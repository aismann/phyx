#define MICROPROFILE_HELP_ALT "Right-Click"
#define MICROPROFILE_HELP_MOD "Ctrl"

#include <GLFW/glfw3.h>

#define MICROPROFILE_GPU_TIMERS 0

#define MICROPROFILE_IMPL
#include "microprofile.h"

#define MICROPROFILEUI_IMPL
#include "microprofileui.h"

struct MicroProfileVertex
{
	float nX, nY;
	uint32_t nColor;
	float fU, fV;
};

#define MICROPROFILE_MAX_VERTICES (16<<10)
#define MAX_FONT_CHARS 256

#define Q0(d, member, v) d[0].member = v
#define Q1(d, member, v) d[1].member = v; d[3].member = v
#define Q2(d, member, v) d[4].member = v
#define Q3(d, member, v) d[2].member = v; d[5].member = v

namespace
{
	uint32_t nVertexPos = 0;
	MicroProfileVertex nDrawBuffer[MICROPROFILE_MAX_VERTICES];
	enum
	{
		MAX_COMMANDS = 32,
	};
	struct 
	{
		uint32_t nCommand;
		uint32_t nNumVertices;
	} DrawCommands[MAX_COMMANDS];

	int32_t nNumDrawCommands;

	GLuint g_FontTexture;

	struct SFontDescription
	{
		uint16_t nCharOffsets[MAX_FONT_CHARS];
		uint32_t nTextureId;
	};

	extern unsigned char g_Font[]; 
	SFontDescription g_FontDescription;
}

void MicroProfileFlush();

static MicroProfileVertex* PushVertices(uint32_t nCommand, int nCount)
{
	if(nVertexPos + nCount > MICROPROFILE_MAX_VERTICES)
	{
		MicroProfileFlush();
	}
	MP_ASSERT(nVertexPos + nCount <= MICROPROFILE_MAX_VERTICES);

	uint32_t nOut = nVertexPos;
	nVertexPos += nCount;

	if(nNumDrawCommands && DrawCommands[nNumDrawCommands-1].nCommand == nCommand)
	{
		DrawCommands[nNumDrawCommands-1].nNumVertices += nCount;
	}
	else
	{
		MP_ASSERT(nNumDrawCommands < MAX_COMMANDS);
		DrawCommands[nNumDrawCommands].nCommand = nCommand;
		DrawCommands[nNumDrawCommands].nNumVertices = nCount;
		++nNumDrawCommands;
	}
	return &nDrawBuffer[nOut];
}

#define FONT_TEX_X 1024
#define FONT_TEX_Y 9
#define UNPACKED_SIZE (FONT_TEX_X*FONT_TEX_Y * 4)

void MicroProfileDrawInit()
{
	for(uint32_t i = 0; i < MAX_FONT_CHARS; ++i)
	{
		g_FontDescription.nCharOffsets[i] = 206;
	}
	for(uint32_t i = 'A'; i <= 'Z'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-'A')*8+1;
	}
	for(uint32_t i = 'a'; i <= 'z'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-'a')*8+217;
	}
	for(uint32_t i = '0'; i <= '9'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-'0')*8+433;
	}
	for(uint32_t i = '!'; i <= '/'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-'!')*8+513;
	}
	for(uint32_t i = ':'; i <= '@'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-':')*8+625+8;
	}
	for(uint32_t i = '['; i <= '_'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-'[')*8+681+8;
	}
	for(uint32_t i = '{'; i <= '~'; ++i)
	{
		g_FontDescription.nCharOffsets[i] = (i-'{')*8+721+8;
	}

	uint32_t* pUnpacked = (uint32_t*)alloca(UNPACKED_SIZE);
	int idx = 0;
	int end = FONT_TEX_X * FONT_TEX_Y / 8;
	for(int i = 0; i < end; i++)
	{
		unsigned char pValue = g_Font[i];
		for(int j = 0; j < 8; ++j)
		{
			pUnpacked[idx++] = pValue & 0x80 ? (uint32_t)-1 : 0;
			pValue <<= 1;
		}
	}

	// Pixel for solid rendering
	pUnpacked[idx - 1] = 0xffffffff;

	uint32_t* p4 = &pUnpacked[0];

	glGenTextures(1, &g_FontTexture);
	glBindTexture(GL_TEXTURE_2D, g_FontTexture);
	{
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);     
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    }
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, FONT_TEX_X, FONT_TEX_Y, 0, GL_RGBA, GL_UNSIGNED_BYTE, &p4[0]);
	glBindTexture(GL_TEXTURE_2D, 0);

	// Settings
	MicroProfileInitUI();

	g_MicroProfileUI.nOpacityBackground = 0x80 << 24;
}

void MicroProfileBeginDraw()
{
	nVertexPos = 0;
	nNumDrawCommands = 0;
}

void MicroProfileFlush()
{
	if(0 == nVertexPos)
		return;

	MICROPROFILE_SCOPEI("MicroProfile", "Flush", 0xffff3456);

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, g_FontTexture);

	// glTexITEXTURE_ENV_MODE

	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);

	glVertexPointer(2, GL_FLOAT, sizeof(MicroProfileVertex), &nDrawBuffer[0].nX);
	glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(MicroProfileVertex), &nDrawBuffer[0].nColor);
	glTexCoordPointer(2, GL_FLOAT, sizeof(MicroProfileVertex), &nDrawBuffer[0].fU);

	int nOffset = 0;
	for (int i = 0; i < nNumDrawCommands; ++i)
	{
		int nCount = DrawCommands[i].nNumVertices;
		glDrawArrays(DrawCommands[i].nCommand, nOffset, nCount);
		nOffset += nCount;
	}

	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);
	glDisableClientState(GL_TEXTURE_COORD_ARRAY);

	glBindTexture(GL_TEXTURE_2D, 0);
	glDisable(GL_TEXTURE_2D);

	nVertexPos = 0;
	nNumDrawCommands = 0;
}

void MicroProfileEndDraw()
{
	MicroProfileFlush();
}

void MicroProfileDrawText(int nX, int nY, uint32_t nColor, const char* pText, uint32_t nLen)
{
	MICROPROFILE_SCOPEI("MicroProfile", "TextDraw", 0xff88ee);

	const float fOffsetU = 5.f / 1024.f;
	MP_ASSERT(nLen <= strlen(pText));
	float fX = (float)nX;
	float fY = (float)nY;
	float fY2 = fY + (MICROPROFILE_TEXT_HEIGHT+1);

	MicroProfileVertex* pVertex = PushVertices(GL_TRIANGLES, 6 * nLen);
	const char* pStr = pText;
	nColor = 0xff000000|((nColor&0xff)<<16)|(nColor&0xff00)|((nColor>>16)&0xff);

	for(uint32_t j = 0; j < nLen; ++j)
	{
		int16_t nOffset = g_FontDescription.nCharOffsets[(int)*pStr++];
		float fOffset = nOffset / 1024.f;
		Q0(pVertex,nX, fX);
		Q0(pVertex,nY, fY);
		Q0(pVertex,nColor, nColor);
		Q0(pVertex,fU, fOffset);
		Q0(pVertex,fV, 0.f);
		
		Q1(pVertex, nX, fX+MICROPROFILE_TEXT_WIDTH);
		Q1(pVertex, nY, fY);
		Q1(pVertex, nColor, nColor);
		Q1(pVertex, fU, fOffset+fOffsetU);
		Q1(pVertex, fV, 0.f);

		Q2(pVertex, nX, fX+MICROPROFILE_TEXT_WIDTH);
		Q2(pVertex, nY, fY2);
		Q2(pVertex, nColor, nColor);
		Q2(pVertex, fU, fOffset+fOffsetU);
		Q2(pVertex, fV, 1.f);


		Q3(pVertex, nX, fX);
		Q3(pVertex, nY, fY2);
		Q3(pVertex, nColor, nColor);
		Q3(pVertex, fU, fOffset);
		Q3(pVertex, fV, 1.f);

		fX += MICROPROFILE_TEXT_WIDTH+1;
		pVertex += 6;
	}
}

void MicroProfileDrawBox(int nX0, int nY0, int nX1, int nY1, uint32_t nColor, MicroProfileBoxType Type)
{
	if(Type == MicroProfileBoxTypeFlat)
	{
		MP_ASSERT(nX0 <= nX1);
		MP_ASSERT(nY0 <= nY1);
		nColor = ((nColor&0xff)<<16)|((nColor>>16)&0xff)|(0xff00ff00&nColor);
		MicroProfileVertex* pVertex = PushVertices(GL_TRIANGLES, 6);
		Q0(pVertex, nX, (float)nX0);
		Q0(pVertex, nY, (float)nY0);
		Q0(pVertex, nColor, nColor);
		Q0(pVertex, fU, 2.f);
		Q0(pVertex, fV, 2.f);
		Q1(pVertex, nX, (float)nX1);
		Q1(pVertex, nY, (float)nY0);
		Q1(pVertex, nColor, nColor);
		Q1(pVertex, fU, 2.f);
		Q1(pVertex, fV, 2.f);
		Q2(pVertex, nX, (float)nX1);
		Q2(pVertex, nY, (float)nY1);
		Q2(pVertex, nColor, nColor);
		Q2(pVertex, fU, 2.f);
		Q2(pVertex, fV, 2.f);
		Q3(pVertex, nX, (float)nX0);
		Q3(pVertex, nY, (float)nY1);
		Q3(pVertex, nColor, nColor);
		Q3(pVertex, fU, 2.f);
		Q3(pVertex, fV, 2.f);
	}
	else
	{
		uint32_t r = 0xff & (nColor>>16);
		uint32_t g = 0xff & (nColor>>8);
		uint32_t b = 0xff & nColor;
		uint32_t nMax = MicroProfileMax(MicroProfileMax(MicroProfileMax(r, g), b), 30u);
		uint32_t nMin = MicroProfileMin(MicroProfileMin(MicroProfileMin(r, g), b), 180u);

		uint32_t r0 = 0xff & ((r + nMax)/2);
		uint32_t g0 = 0xff & ((g + nMax)/2);
		uint32_t b0 = 0xff & ((b + nMax)/2);

		uint32_t r1 = 0xff & ((r+nMin)/2);
		uint32_t g1 = 0xff & ((g+nMin)/2);
		uint32_t b1 = 0xff & ((b+nMin)/2);
		uint32_t nColor0 = (r0<<0)|(g0<<8)|(b0<<16)|(0xff000000&nColor);
		uint32_t nColor1 = (r1<<0)|(g1<<8)|(b1<<16)|(0xff000000&nColor);
		MicroProfileVertex* pVertex = PushVertices(GL_TRIANGLES, 6);
		Q0(pVertex, nX, (float)nX0);
		Q0(pVertex, nY, (float)nY0);
		Q0(pVertex, nColor, nColor0);
		Q0(pVertex, fU, 2.f);
		Q0(pVertex, fV, 2.f);
		Q1(pVertex, nX, (float)nX1);
		Q1(pVertex, nY, (float)nY0);
		Q1(pVertex, nColor, nColor0);
		Q1(pVertex, fU, 3.f);
		Q1(pVertex, fV, 2.f);
		Q2(pVertex, nX, (float)nX1);
		Q2(pVertex, nY, (float)nY1);
		Q2(pVertex, nColor, nColor1);
		Q2(pVertex, fU, 3.f);
		Q2(pVertex, fV, 3.f);
		Q3(pVertex, nX, (float)nX0);
		Q3(pVertex, nY, (float)nY1);
		Q3(pVertex, nColor, nColor1);
		Q3(pVertex, fU, 2.f);
		Q3(pVertex, fV, 3.f);
	}
}

void MicroProfileDrawLine2D(uint32_t nVertices, float* pVertices, uint32_t nColor)
{
	if(!nVertices) return;

	MicroProfileVertex* pVertex = PushVertices(GL_LINES, 2*(nVertices-1));
	nColor = 0xff000000|((nColor&0xff)<<16)|(nColor&0xff00ff00)|((nColor>>16)&0xff);
	for(uint32_t i = 0; i < nVertices-1; ++i)
	{
		pVertex[0].nX = pVertices[i*2];
		pVertex[0].nY = pVertices[i*2+1] ;
		pVertex[0].nColor = nColor;
		pVertex[0].fU = 2.f;
		pVertex[0].fV = 2.f;
		pVertex[1].nX = pVertices[(i+1)*2];
		pVertex[1].nY = pVertices[(i+1)*2+1] ;
		pVertex[1].nColor = nColor;
		pVertex[1].fU = 2.f;
		pVertex[1].fV = 2.f;
		pVertex += 2;
	}
}

namespace
{
	unsigned char g_Font[] = 
	{
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x10,0x78,0x38,0x78,0x7c,0x7c,0x3c,0x44,0x38,0x04,0x44,0x40,0x44,0x44,0x38,0x78,
		0x38,0x78,0x38,0x7c,0x44,0x44,0x44,0x44,0x44,0x7c,0x00,0x00,0x40,0x00,0x04,0x00,
		0x18,0x00,0x40,0x10,0x08,0x40,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x10,0x38,0x7c,0x08,0x7c,0x1c,0x7c,0x38,0x38,
		0x10,0x28,0x28,0x10,0x00,0x20,0x10,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x04,0x00,0x20,0x38,0x38,0x70,0x00,0x1c,0x10,0x00,0x1c,0x10,0x70,0x30,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x28,0x44,0x44,0x44,0x40,0x40,0x40,0x44,0x10,0x04,0x48,0x40,0x6c,0x44,0x44,0x44,
		0x44,0x44,0x44,0x10,0x44,0x44,0x44,0x44,0x44,0x04,0x00,0x00,0x40,0x00,0x04,0x00,
		0x24,0x00,0x40,0x00,0x00,0x40,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x30,0x44,0x04,0x18,0x40,0x20,0x04,0x44,0x44,
		0x10,0x28,0x28,0x3c,0x44,0x50,0x10,0x10,0x08,0x54,0x10,0x00,0x00,0x00,0x04,0x00,
		0x00,0x08,0x00,0x10,0x44,0x44,0x40,0x40,0x04,0x28,0x00,0x30,0x10,0x18,0x58,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x44,0x44,0x40,0x44,0x40,0x40,0x40,0x44,0x10,0x04,0x50,0x40,0x54,0x64,0x44,0x44,
		0x44,0x44,0x40,0x10,0x44,0x44,0x44,0x28,0x28,0x08,0x00,0x38,0x78,0x3c,0x3c,0x38,
		0x20,0x38,0x78,0x30,0x18,0x44,0x10,0x6c,0x78,0x38,0x78,0x3c,0x5c,0x3c,0x3c,0x44,
		0x44,0x44,0x44,0x44,0x7c,0x00,0x4c,0x10,0x04,0x08,0x28,0x78,0x40,0x08,0x44,0x44,
		0x10,0x00,0x7c,0x50,0x08,0x50,0x00,0x20,0x04,0x38,0x10,0x00,0x00,0x00,0x08,0x10,
		0x10,0x10,0x7c,0x08,0x08,0x54,0x40,0x20,0x04,0x44,0x00,0x30,0x10,0x18,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x44,0x78,0x40,0x44,0x78,0x78,0x40,0x7c,0x10,0x04,0x60,0x40,0x54,0x54,0x44,0x78,
		0x44,0x78,0x38,0x10,0x44,0x44,0x54,0x10,0x10,0x10,0x00,0x04,0x44,0x40,0x44,0x44,
		0x78,0x44,0x44,0x10,0x08,0x48,0x10,0x54,0x44,0x44,0x44,0x44,0x60,0x40,0x10,0x44,
		0x44,0x44,0x28,0x44,0x08,0x00,0x54,0x10,0x18,0x18,0x48,0x04,0x78,0x10,0x38,0x3c,
		0x10,0x00,0x28,0x38,0x10,0x20,0x00,0x20,0x04,0x10,0x7c,0x00,0x7c,0x00,0x10,0x00,
		0x00,0x20,0x00,0x04,0x10,0x5c,0x40,0x10,0x04,0x00,0x00,0x60,0x10,0x0c,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x7c,0x44,0x40,0x44,0x40,0x40,0x4c,0x44,0x10,0x04,0x50,0x40,0x44,0x4c,0x44,0x40,
		0x54,0x50,0x04,0x10,0x44,0x44,0x54,0x28,0x10,0x20,0x00,0x3c,0x44,0x40,0x44,0x7c,
		0x20,0x44,0x44,0x10,0x08,0x70,0x10,0x54,0x44,0x44,0x44,0x44,0x40,0x38,0x10,0x44,
		0x44,0x54,0x10,0x44,0x10,0x00,0x64,0x10,0x20,0x04,0x7c,0x04,0x44,0x20,0x44,0x04,
		0x10,0x00,0x7c,0x14,0x20,0x54,0x00,0x20,0x04,0x38,0x10,0x10,0x00,0x00,0x20,0x10,
		0x10,0x10,0x7c,0x08,0x10,0x58,0x40,0x08,0x04,0x00,0x00,0x30,0x10,0x18,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x44,0x44,0x44,0x44,0x40,0x40,0x44,0x44,0x10,0x44,0x48,0x40,0x44,0x44,0x44,0x40,
		0x48,0x48,0x44,0x10,0x44,0x28,0x6c,0x44,0x10,0x40,0x00,0x44,0x44,0x40,0x44,0x40,
		0x20,0x3c,0x44,0x10,0x08,0x48,0x10,0x54,0x44,0x44,0x44,0x44,0x40,0x04,0x12,0x4c,
		0x28,0x54,0x28,0x3c,0x20,0x00,0x44,0x10,0x40,0x44,0x08,0x44,0x44,0x20,0x44,0x08,
		0x00,0x00,0x28,0x78,0x44,0x48,0x00,0x10,0x08,0x54,0x10,0x10,0x00,0x00,0x40,0x00,
		0x10,0x08,0x00,0x10,0x00,0x40,0x40,0x04,0x04,0x00,0x00,0x30,0x10,0x18,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x44,0x78,0x38,0x78,0x7c,0x40,0x3c,0x44,0x38,0x38,0x44,0x7c,0x44,0x44,0x38,0x40,
		0x34,0x44,0x38,0x10,0x38,0x10,0x44,0x44,0x10,0x7c,0x00,0x3c,0x78,0x3c,0x3c,0x3c,
		0x20,0x04,0x44,0x38,0x48,0x44,0x38,0x44,0x44,0x38,0x78,0x3c,0x40,0x78,0x0c,0x34,
		0x10,0x6c,0x44,0x04,0x7c,0x00,0x38,0x38,0x7c,0x38,0x08,0x38,0x38,0x20,0x38,0x70,
		0x10,0x00,0x28,0x10,0x00,0x34,0x00,0x08,0x10,0x10,0x00,0x20,0x00,0x10,0x00,0x00,
		0x20,0x04,0x00,0x20,0x10,0x3c,0x70,0x00,0x1c,0x00,0x7c,0x1c,0x10,0x70,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x38,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	};
}